# -*- coding: utf-8 -*-
"""Python Pandas Part - 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-uJr22TvHbbAXksKAgbTCkJOqNtTflVS

**Working with Missing Data**
"""

'''
--> MIssing data can occur when no information is provided for one or more
items for a whole unit. Missing Data is very big problem in real life scenario.
Missing Data can also refer to as NA value in Pandas.

Checking for missing values using isnull() and notnull()

-->In order to check missing values in Pandas DataFrame, we use a function
isnull() and notnull(). Both function help in checking whether a value in
NaN or not. These function can also be used in Pandas Series in order to find
null values in a series.

'''

import pandas as pd
import numpy as np

#dictionary of lists

dict={'First Score':[100,90,np.nan,95],
      'Second Score':[30,45,56,np.nan],
      'Third Score':[np.nan,40,80,98]}

#creating a dataframe from list
df=pd.DataFrame(dict)

#using insull() function
df.isnull()

"""**Filling missing values using fillna(), replace() and interpolate()**"""

'''
-->In order to fill null values in a datasets, we use fillname(), replace()
and interpolate() function these function replance NaN values with some value
if their own. All these function help in filling a null values in datasets
of a DataFrame.

Interpolate() function is basically used to fill NA values in the dataframe but
its uses various interpolation technique to fill the missing values rather
than hard coding value.
'''

import pandas as pd
import numpy as np

#dictionary of lists

dict={'First Score':[100,90,np.nan,95],
      'Second Score':[30,45,56,np.nan],
      'Third Score':[np.nan,40,80,98]}

#creating dataframe from dictionary
df=pd.DataFrame(dict)
print(df)

#filling missing value using fillna()
df.fillna(0)

"""**Dropping missing values using dropna()**"""

'''
--> In order to drop a null values from a datafra, we used dropna() function
this function drop Rows/Columns of datasets with Null Values in different ways.

'''

import pandas as pd
import numpy as np

# dictionary of lists
dict = {'First Score':[100, 90, np.nan, 95],
        'Second Score': [30, np.nan, 45, 56],
        'Third Score':[52, 40, 80, 98],
        'Fourth Score':[np.nan, np.nan, np.nan, 65]}

# creating a dataframe from dictionary
df = pd.DataFrame(dict)

#using dropna() function

df.dropna()

"""**iterating over rows and columns**"""

'''
--> Iteration is a general term for taking each item of something, one after
another. Pandas DataFrame consists of rows and columns so, in order to iterate
over dataframe, we have to iterate a datafram like a dictionary.

'''

"""**Iterating over rows**"""

'''
-->In order to iterate over rows, we can use three functions:-
iteritems()
iterrows()
itertuples()

'''
# importing pandas as pd
import pandas as pd

# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}

# creating a dataframe from a dictionary
df = pd.DataFrame(dict)

print(df)

#iterating over rows using iterrows() function

for i,j in df.iterrows():
  print(i,j)
  print()

'''Iterating over Columns :
In order to iterate over columns, we need to create a list of dataframe \
columns and then iterating through that list to pull out the dataframe columns.

'''
# importing pandas as pd
import pandas as pd

# dictionary of lists
dict = {'name':["aparna", "pankaj", "sudhir", "Geeku"],
        'degree': ["MBA", "BCA", "M.Tech", "MBA"],
        'score':[90, 40, 80, 98]}

# creating a dataframe from a dictionary
df = pd.DataFrame(dict)

print(df)

# creating a list of dataframe columns
columns = list(df)

for i in columns:

    # printing the third element of the column
    print (df[i][2])











