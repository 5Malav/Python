# -*- coding: utf-8 -*-
"""Python Pandas Part - 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BH7-lmSeX0qgNzNlcMbOM0878PKG3406

**Contents**
"""

'''
Part 1:-Introduction
Part 2:-Creating Objects
Part 3:-Viewing Data
Part 4:-Selection
Part 5:-Manipulating Data
Part 6:-Grouping Data
Part 7:-Merging,Joining and Concatenating
Part 8:-Working with Date and Time
Part 9:-Working with Text Data
Part 10:-Operations
Part 11:-Visualizations
Part 12:-Application and Projects
Part 13:-Miscellaneous
'''

"""**Part 1: - Introduction**"""

'''
-->Pandas is a open source library.

-->it can be used for data manipulation.

-->it is well suited for tabular data such as spreadsheets or SQL tables.

--> its is built on top of the Numpy library which means that
a lot of structures of NumPy are used or replicated in Pandas.

Uses of Pandas:-

-->Data set cleaning , merging and joining.

-->Easy handling of missing data (represented as NaN) in floating
point as well as non-floating point data.

-->Columns can be inserted and deleted from DataFrame and higher
dimensional objects.

-->Powerful group by functionality for performing split apply
combine operations on data sts.

-->Data visulization.

'''

"""**Data Structures in Pandas Library**"""

'''
Pandas Series

-->A Pandas Series in a one-dimensional labeled array capable of
holding data of any tupe(integer,string,float,Python objects etc.)
The axis labels are collectively called indexes.

-->The Pandas Series is nothing but a column in an Excel sheet.
Labels need not be unique but most be of a hashable type.

-->The object supports both integer and label-based indexing
and provides a host of methods for performing operations involving
the index.

'''

"""**Craeting a Series**"""

'''
Pandas Series is created by loading the datasets from existing storage
(which can be a SQL database, a CSV file or an Excel file.)

Pandas Series can be created from lists, dictionaries , scalar values etc.

'''

import pandas as pd
import numpy as np

#Creating empty series

ser = pd.Series()
print("Pandas Series : ",ser)

#simple array

data=np.array(['g','e','e','k','s'])

ser=pd.Series(data)

print("Pandas Series:\n",ser)

"""**Creating DataFrame**"""

'''
-->Pandas DataFrame is created by loading the datasets from
existing storage(which can be a SQL database, a CSV file,
or an Excel file.)

--> Pandas DataFrame can be created from lists,dictionaries,
a list of disctionaries etc.
'''

import pandas as pd

#Calling DataFrame constructor

df=pd.DataFrame()
print(df)

#list of strings

lst=['I','am','the','best','Data Scientist']

#calling DataFrame constructor on list
df=pd.DataFrame(lst)
print(df)

"""**Part 2:-Creating Objects**

**Creating a Pandas DataFrame**
"""

import pandas as pd

#list of strings
lst=["Python","Machine Learning","Deep Learning","Generative AI"]

#calling a dataframe contstuctor on list
df=pd.DataFrame(lst)
print(df)

"""**Creating DataFrame from dict of ndarray/lists**"""

'''
-->To create DataFrame from dict on narray/list , all the narray must be of same
length. If index is passed then the length index should be equal to the length
arrays. If no index is passed , they by default, index with be range(n)
where n is the array length.
'''
import pandas as pd
#intialise data of lists

data={"Name":["Malav","Vatsal","Priyam","Deep"],
      "Age":[27,26,29,25]}

#create dataframe

df=pd.DataFrame(data)
print(df)

"""**Dealing with Rows and Columns**"""

'''
-->A DataFrame is a 2-dimensional data structure i.e data is aligned in a tabular
fashion in rows and columns. We can perform basic operations on rows/columns like
selecting,deleting,adding and renaming.

Column Selection:-
In order to select a column in Pandas DataFrame we can either access the columns
by call them by their column names.

'''
import pandas as pd

#Define a dictionary containing column employee data

data={"Name": ["Malav",'Deep',"Keith","Charlyne"],
      "Age":[27,26,36,45],
      "Address":['Ahmedabad','Scarborough','Ottawa','North York'],
      'Qualification':['Msc','Diploma','Graduate','Degree']}

#craete a dataframe
df=pd.DataFrame(data)
print(df)

#Select 2 columns
print(df[['Age','Address']])

"""**Row Selection**"""

'''
-->Pandas provide a unique method to retrieve rows from a data frame.

-->DataFrame.loc[] method is used to retrieve rows from Pandas DataFrame.

-->Rows can also be selected by passing integer location to an iloc[] function.

'''

import pandas as pd
import io
path="/content/nba.csv"

df=pd.read_csv(path)
print(df.head())

#malimg data frame from csv file.

##data=pd.read_csv(data,index_col="Name")

#retrieving row by loc method
#
first = df.loc[0]
second = df.loc[1]
print(first,'\n\n\n',second)

"""**Indexing and Selecting Data**"""

'''
--> Indexing in pandas means simply seldcting particular rows and columns
of data from a DataFrame. Indexing could mean selecting all the rows and some
of the columns, some of the rows and all of the columns, or some of each of
the rows and columns. Indexing can also be knows as Subset Selection.

Indexing a DataFrame using indexing operator[]:

Indexing operator is used to refer to the square brackets following an object.
The .loc and .iloc indexers also use the indexing operator to make selections.
In this indexing operator to refer to df[].

'''

#Selecting a single column
import pandas as pd

#making data frame from csv file.

df=pd.read_csv(path)

#retrieving column by indexing operator.
first=df['Age']
print(first)

"""**Indexing a DataFreame using .loc[] & .iloc[]**




"""

'''
-->The function selects data by the label of the tows and columns. The
df.loc indexer selects data in a different way than just the indexing operator.

it can select subsets of rows and columns. it can also simultaniously select
subsets of rows and columns.

'''

import pandas as pd

# making data frame from csv file
data = pd.read_csv("nba.csv", index_col ="Name")
#without index_col='Name' it will through an error.

# retrieving row by loc method
first = data.loc["Avery Bradley"]
second = data.loc["R.J. Hunter"]


print(first, "\n\n\n", second)

'''
.iloc[]
-->This function allows us retrieve rows and columns by positions. In order to
do that, we will need to specify the positions of the rows that we want and
the positions of the colhmns that we want as well.

--> The df.iloc[] inmdexer is very similar to .iloc[] but only uses integer
locations to make its selections.
'''

#In order to select a singlw row using .iloc[] , we can pass a single integer
#.iloc[] function.

import pandas as pd

#making data frame from csv file.

data=pd.read_csv("nba.csv",index_col='Name')

#retrieving rows by iloc method
row2=data.iloc[3]
print(row2)









