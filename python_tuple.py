# -*- coding: utf-8 -*-
"""Python - Tuple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12XQ6srDurX4D6NhPL8oW00Ca_mTL9w9O

Tuples-->

--> A tuple is a container which holds a series of comma separated values(items or elements) between parenthis such as an(x,y)

--> Tuples are like lists, except they are immutable (i.e. you cannot change its content once created) and can hold mix data types

--> Tuples play a sort of "struct" role in python- a convenient way to pass around a little logical

**Create a Tuple**
"""

#create an empty tuple

tup=()
print(tup)

#create a tuple with different data types

tup1=('tuple','false',3.2,1)
print(tup1)

#create a tuple of one item notation without parenthesis
tup2=4,
print(tup2)

#create a tuple from iterable object
tup3=tuple([False,True])
print(tup3)

"""**Check if element exist**"""

tup=("w",3,"r","s")

print("r" in tup)

print("m" in tup)

"""**Get an element from Tuple**"""

tup=("m",1,2,"a",3,4,"l",5,6,"a",7,8,"v")
print(tup)

print(tup[0])

print(tup[5])

print(tup[-1])

print(tup[-2])

"""**List to Tuple**"""

ls=[1,2,3,4,5]

tup=tuple(ls)
print(tup)

"""**Unpack a tuple in several variable***"""

tup=1,2,3

n1,n2,n3=tup
#unpack a tuple in variable
print(n1,n2,n3)

#the number of variable must be equal to number of items

n1,n2,n3,n4=tup
print(n1,n2,n3,n4)

"""**Add items in python tuple**"""

tup=(1,2,3,4,5)
print(tup)

#tuples are immutable so you can not add new elements.
#Using merge of tuples with the + opertor you add an element and it will create
# a new tuple

tup1= tup+(9,)
print(tup1)

#adding items in a specific index
tup2=tup[:5]+(10,20,30)+tup1[:5]
print(tup2)

#converting tuple to list
lstup=list(tup)
print(lstup)
lstup.append(10)
print(lstup)

"""**Clon a Tuple**"""

from copy import deepcopy

tup=("hello",5,[],True)
print(tup)

#make a copy of tuple using deepcopy() function

tup_clon=deepcopy(tup)
print(tup_clon)
tup_clon[2].append(10)
print(tup_clon)

"""**Find out repetitive items**"""

tup=(1,2,3,4,4,5,5,5,6,6,6,6,7,7)

count_tup=tup.count(6)
print(count_tup)

count_tup1=tup.count(5)
print(count_tup1)

"""**Remove an item from Tuple**"""

tup=(1,2,3,"m","a")
print(tup)

print("***************")
#using + we can remove or add items from tuple
tup1=tup[:3]+tup[4:]
print(tup1)

#converting tuple to list
lstup=list(tup)
print(lstup)

#use a different way to remove item
lstup1=lstup.remove(1)
print(lstup)

"""**Slice a Tuple**"""

tup=(1,2,3,4,5,6,7)

#use tuple[start:stop] the start index is inclusive and stop index is exclusive

tup_slice=tup[2:5]
print(tup_slice)

#if the start index is not defined is taken from the beginning if tuple
tup_slice2=tup[:5]
print(tup_slice2)

#if the end index is not defined is taken until the end of tuple
tup_slice3=tup[3:]
print(tup_slice3)

#if neither is defined , it returns the all elements of tuple
tup_slice4=tup[:]
print(tup_slice4)

#indexes can be defined with negative values.
tup_slice5=tup[-4:-1]
print(tup_slice5)

"""**Find the index of an item of Tuple**"""

tup=tuple("index tuple")
print(tup)

#get an index of first item whose value is passed as parameter
tup_index=tup.index("p")
print(tup_index)

#define the index from which you want you search

tup_index1=tup.index("p",5)
print(tup_index1)

#define a segment of the tuple to be searched
tup_index2=tup.index("p",6,9)
print(tup_index2)

#if item does not exist then it will give an error

tup_index3=tup.index("m")
print(tup_index3)

"""**The size of a Tuple**"""

tup=tuple("w3resoruce")
print(tup)

#use len() function to know length of tuple
print(len(tup))

"""**how to use + and * in Tuple**"""

# * operator
tup=tuple([5])
print(tup*3)

tup1=tuple([1,2,3])
print(tup1*3)


# + operator

#create 3 tuples

tup2=(1,2,3,4,5)
tup3=tuple("w3resouce")
tup4=(True,False)

tup_=tup2+tup3+tup4
print(tup_)

#slice of a tuple using step parameter :
#start:stop:step

#return a tuple with jump every 3 items

_slice=tup_[::4]#start from 1 and from 1 it counts 4 steps including 1 so
#after 1, 5 is next element, after 5 "e"etc..
print(_slice)

#when step is negative jumpt is made back
_slice1=tup_[9:3:-4]
print(_slice1)







